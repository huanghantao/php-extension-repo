#!/usr/bin/env php
<?php

use League\CLImate\CLImate;

! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));

require BASE_PATH . '/vendor/autoload.php';

class PPP
{
    /**
     * @var CLImate
     */
    protected $climate;

    /**
     * @var string
     *
     * the address of the extension repo, it can be remote or local
     */
    protected $extensionRepo;

    /**
     * @var string
     */
    protected $extensionName;

    /**
     * @var string
     */
    protected $extensionVersion;

    /**
     * @var string
     *
     * the extension binary file path of local repo
     */
    protected $extensionPath;

    /**
     * @var string
     *
     * the extension header files path of local repo
     */
    protected $includePath;

    /**
     * @var string
     *
     * the path which the extension binary file need to be installed
     */
    protected $extensionDir;

    /**
     * @var string
     *
     * the path which the extension header files need to be installed
     */
    protected $includeDir;

    /**
     * @var string
     *
     * the absolute path of php-config command
     */
    protected $phpConfig;

    public function __construct(string $extensionRepo)
    {
        $this->climate = new CLImate();
        $this->extensionRepo = $extensionRepo;
        $this->init();
    }

    public function showExtension()
    {
        $resource = opendir($this->extensionRepo);
        while ($dir = readdir($resource)) {
            if ($dir == '.' || $dir == '..') {
                continue;
            }
            $dirs[] = $dir;
        }

        $this->climate->green('You have the following extensions:')->columns($dirs);
    }

    public function run(): void
    {
        $this->showExtension();
        $this->askExtension();
        $this->askVersion();
        $this->checkMachine();
        $this->installExtension();
    }

    /**
     * removes files and non-empty directories.
     */
    public static function rrmdir(string $dir)
    {
        if (is_dir($dir)) {
            $files = scandir($dir);
            foreach ($files as $file) {
                if ($file != '.' && $file != '..') {
                    self::rrmdir("{$dir}/{$file}");
                }
            }
            rmdir($dir);
        } elseif (file_exists($dir)) {
            unlink($dir);
        }
    }

    /**
     * copies $src/files and non-empty directories to $dst/.
     */
    public static function rcopy(string $src, string $dst)
    {
        if (file_exists($dst)) {
            self::rrmdir($dst);
        }
        if (is_dir($src)) {
            mkdir($dst);
            $files = scandir($src);
            foreach ($files as $file) {
                if ($file != '.' && $file != '..') {
                    self::rcopy("{$src}/{$file}", "{$dst}/{$file}");
                }
            }
        } elseif (file_exists($src)) {
            if (! copy($src, $dst)) {
                return false;
            }
        }

        return true;
    }

    protected function askExtension(): void
    {
        $input = $this->climate->green()->input('What extensions would you like to install?');
        $response = $input->prompt();
        if (! is_dir("{$this->extensionRepo}/{$response}")) {
            $this->climate->error("Do not have extension [{$response}]");
            exit(1);
        }
        $this->extensionName = $response;
    }

    protected function askVersion(): void
    {
        $resource = opendir("{$this->extensionRepo}/{$this->extensionName}");
        while ($dir = readdir($resource)) {
            if ($dir == '.' || $dir == '..') {
                continue;
            }
            $dirs[] = $dir;
        }

        arsort($dirs);

        $input = $this->climate->green()->radio('What version would you like to install?', $dirs);
        $this->extensionVersion = $input->prompt();
    }

    protected function checkMachine(): void
    {
        $OS = $this->shellExecEx('uname -s');
        $CPU = $this->shellExecEx('uname -m');

        $extensionPath = "{$this->extensionRepo}/{$this->extensionName}/{$this->extensionVersion}/{$OS}-{$CPU}";
        if (! file_exists($extensionPath)) {
            $this->climate->error('The extension does not support the current machine');
            exit(1);
        }

        $this->extensionPath = $extensionPath;
        $this->includePath = "{$this->extensionRepo}/{$this->extensionName}/{$this->extensionVersion}/include_dir";
    }

    protected function installExtension(): void
    {
        $this->climate->lightGray("Install extension to {$this->extensionDir}/ ...");
        if (! copy($this->extensionPath, "{$this->extensionDir}/{$this->extensionName}.so")) {
            $this->climate->error('Install extension error!');
            exit(1);
        }

        $this->climate->yellow('Install extension success!');

        if (file_exists($this->includePath)) {
            $this->climate->lightGray("Install header to {$this->includeDir}/ ...");
            if (! self::rcopy($this->includePath, "{$this->includeDir}/{$this->extensionName}")) {
                $this->climate->error('Install header error!');
                exit(1);
            }

            $this->climate->yellow('Install header success!');
        }
    }

    protected function shellExecEx(string $command, bool $flag = true): string
    {
        $ret = shell_exec($command);
        if ($flag) {
            $ret = trim($ret);
        }
        return $ret;
    }

    protected function init(): void
    {
        $this->phpConfig = $this->shellExecEx('which php-config');

        if (! $this->phpConfig) {
            $this->climate->error('Do not have php-config!');
            exit(1);
        }

        $this->extensionDir = $this->shellExecEx("{$this->phpConfig} --extension-dir");
        $this->includeDir = $this->shellExecEx("{$this->phpConfig} --include-dir") . '/ext';
    }
}

(new PPP('local_repo'))->run();
