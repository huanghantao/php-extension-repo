#!/usr/bin/env php
<?php

use League\CLImate\CLImate;

! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));

require BASE_PATH . '/vendor/autoload.php';

class PPP
{
    /**
     * @var CLImate
     */
    protected $climate;

    /**
     * @var string
     */
    protected $extensionRepo;

    /**
     * @var string
     */
    protected $extensionName;

    /**
     * @var string
     */
    protected $extensionVersion;

    protected $extensionPath;

    /**
     * @var string
     */
    protected $installDir;

    /**
     * @var string
     */
    protected $phpConfig;

    public function __construct(string $extensionRepo)
    {
        $this->climate = new CLImate();
        $this->extensionRepo = $extensionRepo;
        $this->init();
    }

    public function showExtension()
    {
        $resource = opendir($this->extensionRepo);
        while ($dir = readdir($resource)) {
            if ($dir == '.' || $dir == '..') {
                continue;
            }
            $dirs[] = $dir;
        }

        $this->climate->green('You have the following extensions:')->columns($dirs);
    }

    public function run(): void
    {
        $this->showExtension();
        $this->askExtension();
        $this->askVersion();
        $this->checkMachine();
        $this->installExtension();
    }

    protected function askExtension(): void
    {
        $input = $this->climate->green()->input('What extensions would you like to install?');
        $response = $input->prompt();
        if (! is_dir("{$this->extensionRepo}/{$response}")) {
            $this->climate->error("Do not have extension [{$response}]");
            exit(1);
        }
        $this->extensionName = $response;
    }

    protected function askVersion(): void
    {
        $resource = opendir("{$this->extensionRepo}/{$this->extensionName}");
        while ($dir = readdir($resource)) {
            if ($dir == '.' || $dir == '..') {
                continue;
            }
            $dirs[] = $dir;
        }

        $input = $this->climate->green()->radio('What version would you like to install?', $dirs);
        $this->extensionVersion = $input->prompt();
    }

    protected function checkMachine(): void
    {
        $OS = $this->shellExecEx('uname -s');
        $CPU = $this->shellExecEx('uname -m');

        $extensionPath = "{$this->extensionRepo}/{$this->extensionName}/{$this->extensionVersion}/{$OS}-{$CPU}";
        if (! file_exists($extensionPath)) {
            $this->climate->error('The extension does not support the current machine');
            exit(1);
        }

        $this->extensionPath = $extensionPath;
    }

    protected function installExtension(): void
    {
        $this->climate->lightGray("Install extension to {$this->installDir}/ ...");
        if (! copy($this->extensionPath, "{$this->installDir}/{$this->extensionName}.so")) {
            $this->climate->error('Install extension error!');
            exit(1);
        }

        $this->climate->yellow('Install extension success!');
    }

    protected function shellExecEx(string $command, bool $flag = true): string
    {
        $ret = shell_exec($command);
        if ($flag) {
            $ret = trim($ret);
        }
        return $ret;
    }

    protected function init(): void
    {
        $this->phpConfig = $this->shellExecEx('which php-config');

        if (! $this->phpConfig) {
            $this->climate->error('Do not have php-config!');
            exit(1);
        }

        $this->installDir = $this->shellExecEx("{$this->phpConfig} --extension-dir");
    }
}

(new PPP('local_repo'))->run();
